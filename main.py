#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Email-Telegram –±–æ—Ç–∞
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—á—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
"""

import time
import logging
import signal
import sys
import os
from datetime import datetime
from dotenv import load_dotenv
from typing import Dict, List

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
try:
    from email_client import EmailClient
    from parser import EmailParser
    from telegram_bot import TelegramBotSync
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    print("üìù –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)


class EmailTelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—á—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        load_dotenv()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self._setup_logging()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.config = self._load_config()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.email_client = None
        self.parser = EmailParser()
        self.telegram_bot = None

        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
        self.running = False

        # –°—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats = {
            'emails_processed': 0,
            'notifications_sent': 0,
            'errors': 0,
            'started_at': datetime.now()
        }

        self.logger.info("Email-Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        os.makedirs('logs', exist_ok=True)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_level = os.getenv('LOG_LEVEL', 'INFO').upper()

        logging.basicConfig(
            level=getattr(logging, log_level),
            format=log_format,
            handlers=[
                # –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
                logging.StreamHandler(sys.stdout),
                # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                logging.FileHandler(
                    f'logs/bot_{datetime.now().strftime("%Y%m%d")}.log',
                    encoding='utf-8'
                )
            ]
        )

        self.logger = logging.getLogger(__name__)
        self.logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ (—É—Ä–æ–≤–µ–Ω—å: {log_level})")

    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""

        config = {
            # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'email_server': os.getenv('EMAIL_SERVER', 'imap.yandex.ru'),
            'email_port': int(os.getenv('EMAIL_PORT', 993)),
            'email_login': os.getenv('EMAIL_LOGIN'),
            'email_password': os.getenv('EMAIL_PASSWORD'),
            'email_sender': os.getenv('EMAIL_SENDER'),

            # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            'telegram_token': os.getenv('TELEGRAM_BOT_TOKEN'),
            'telegram_chat_id': os.getenv('TELEGRAM_CHAT_ID'),
            'telegram_proxy': os.getenv('TELEGRAM_PROXY_URL'),

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
            'check_interval': int(os.getenv('CHECK_INTERVAL', 1800)),  # 30 –º–∏–Ω—É—Ç
            'max_errors': int(os.getenv('MAX_ERRORS', 5)),
            'error_cooldown': int(os.getenv('ERROR_COOLDOWN', 300)),  # 5 –º–∏–Ω—É—Ç
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        required_settings = [
            'email_login', 'email_password', 'email_sender',
            'telegram_token', 'telegram_chat_id'
        ]

        missing_settings = [key for key in required_settings if not config[key]]

        if missing_settings:
            self.logger.error(f"–ù–µ –∑–∞–¥–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {missing_settings}")
            self.logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
            sys.exit(1)

        self.logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return config

    def _initialize_components(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º email –∫–ª–∏–µ–Ω—Ç
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è email –∫–ª–∏–µ–Ω—Ç–∞...")
            self.email_client = EmailClient(
                server=self.config['email_server'],
                port=self.config['email_port'],
                login=self.config['email_login'],
                password=self.config['email_password']
            )

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
            self.telegram_bot = TelegramBotSync(
                bot_token=self.config['telegram_token'],
                chat_id=self.config['telegram_chat_id'],
                proxy_url=self.config['telegram_proxy']
            )

            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {str(e)}")
            return False

    def _test_connections(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""

        self.logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")

        # –¢–µ—Å—Ç email –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            if not self.email_client.connect():
                self.logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—á—Ç–µ")
                return False

            if not self.email_client.select_mailbox():
                self.logger.error("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞")
                return False

            self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—á—Ç—ã: {str(e)}")
            return False

        # –¢–µ—Å—Ç Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            if not self.telegram_bot.test_connection():
                self.logger.error("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram")
                return False

            self.logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {str(e)}")
            return False

        return True

    def _process_new_emails(self) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º"""

        processed_count = 0

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
            new_emails = self.email_client.get_new_emails_from_sender(
                self.config['email_sender'],
                update_state=True,
                retry_count=3
            )

            if not new_emails:
                self.logger.debug("–ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return 0

            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(new_emails)} –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º")

            for email_data in new_emails:
                try:
                    self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞: {email_data['subject'][:50]}...")

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–∞—Ö
                    if not self.parser.is_maintenance_email(email_data):
                        self.logger.info("–ü–∏—Å—å–º–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –æ —Ä–∞–±–æ—Ç–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue

                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                    parsed_data = self.parser.parse_email(email_data)

                    if not parsed_data:
                        self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–∏—Å—å–º–æ")
                        continue

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
                    if self.telegram_bot.send_maintenance_notification(parsed_data):
                        self.logger.info("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        self.stats['notifications_sent'] += 1
                        processed_count += 1
                    else:
                        self.logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
                        self.stats['errors'] += 1

                    self.stats['emails_processed'] += 1

                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {str(e)}")
                    self.stats['errors'] += 1

            return processed_count

        except Exception as e:
            error_msg = str(e).lower()

            # –î–ª—è –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ warning, –∞ –Ω–µ error
            if any(err in error_msg for err in ['broken pipe', 'connection', 'socket', 'timeout']):
                self.logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
                self.logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–µ")
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º: {str(e)}")
                self.stats['errors'] += 1

            return 0

    def _send_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""

        startup_message = f"""üöÄ *Email-Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω*

üìß –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: {self.config['email_sender']}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config['check_interval']} —Å–µ–∫
üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

_–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!_"""

        try:
            self.telegram_bot.send_message(startup_message)
            self.logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

    def _send_stats_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""

        uptime = datetime.now() - self.stats['started_at']
        hours = int(uptime.total_seconds() // 3600)
        minutes = int((uptime.total_seconds() % 3600) // 60)

        stats_message = f"""üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞*

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º
üìß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {self.stats['emails_processed']}
üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.stats['notifications_sent']}
‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}

üïí {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"""

        try:
            self.telegram_bot.send_message(stats_message, disable_notification=True)
            self.logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""

        def signal_handler(signum, frame):
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

            # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ç–æ—Ä–æ–π Ctrl+C, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
            if hasattr(self, '_shutdown_initiated'):
                self.logger.warning("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                import os
                os._exit(0)

            self._shutdown_initiated = True
            self.stop()

        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""

        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Email-Telegram –±–æ—Ç–∞...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if not self._initialize_components():
            self.logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            return

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self._test_connections():
            self.logger.error("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            return

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        self._setup_signal_handlers()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        self._send_startup_notification()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        self.running = True
        error_count = 0
        last_stats_time = datetime.now()

        self.logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.config['check_interval']} —Å–µ–∫—É–Ω–¥")

        while self.running:
            try:
                cycle_start = datetime.now()

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
                processed = self._process_new_emails()

                if processed > 0:
                    self.logger.info(f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed} –ø–∏—Å–µ–º")
                    error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                else:
                    # –ï—Å–ª–∏ –ø–∏—Å–µ–º –Ω–µ –±—ã–ª–æ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –Ω–µ —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –æ—à–∏–±–∫—É
                    error_count = 0

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
                if (datetime.now() - last_stats_time).total_seconds() > 86400:  # 24 —á–∞—Å–∞
                    self._send_stats_notification()
                    last_stats_time = datetime.now()

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if self.running:
                    time.sleep(self.config['check_interval'])

            except Exception as e:
                error_msg = str(e).lower()

                # –†–∞–∑–¥–µ–ª—è–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
                is_connection_error = any(err in error_msg for err in [
                    'broken pipe', 'connection', 'socket', 'timeout', 'network'
                ])

                if is_connection_error:
                    # –î–ª—è –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å—á–µ—Ç—á–∏–∫
                    self.logger.warning(f"–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                    self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É...")
                    time.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    error_count += 1
                    self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                    self.stats['errors'] += 1

                    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥
                    if error_count >= self.config['max_errors']:
                        self.logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ ({error_count})")

                        try:
                            self.telegram_bot.send_error_notification(
                                f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞. –û—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥: {error_count}"
                            )
                        except:
                            pass

                        self.logger.info(f"–ü–∞—É–∑–∞ –Ω–∞ {self.config['error_cooldown']} —Å–µ–∫—É–Ω–¥")
                        time.sleep(self.config['error_cooldown'])
                        error_count = 0
                    else:
                        time.sleep(30)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –µ–¥–∏–Ω–∏—á–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö

        self.logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""

        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        self.running = False

        # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ø–æ—á—Ç—ã
        if self.email_client:
            self.email_client.disconnect()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        if self.telegram_bot:
            try:
                stop_message = f"""üõë *Email-Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–∏—Å–µ–º: {self.stats['emails_processed']}
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.stats['notifications_sent']}
‚Ä¢ –û—à–∏–±–æ–∫: {self.stats['errors']}

üïí {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"""

                self.telegram_bot.send_message(stop_message)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""

    print("ü§ñ Email-Telegram –±–æ—Ç")
    print("=" * 50)

    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = EmailTelegramBot()
        bot.start()

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
        print("‚ÑπÔ∏è –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    main()
