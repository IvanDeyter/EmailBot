#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ –ø–∏—Å–µ–º
"""

import logging
import sys
import os
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –Ω–∞—à–∏–º –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from email_client import EmailClient
from parser import EmailParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def test_parser_with_sample():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –ø–∏—Å—å–º–∞"""
    
    # –í–∞—à –ø—Ä–∏–º–µ—Ä –ø–∏—Å—å–º–∞
    sample_email = {
        'subject': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö –í–Ω–µ–ø–ª–∞–Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ú–æ—Ç–∏–≤',
        'body': '''–£–≤–∞–∂–∞–µ–º—ã–µ –∫–ª–∏–µ–Ω—Ç—ã!
–û–ø–µ—Ä–∞—Ç–æ—Ä –ú–æ—Ç–∏–≤ —Å–æ–æ–±—â–∏–ª –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.
–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç:** 19.06.2025 21:00 **(–ú–°–ö/GMT+3)
–û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç:** 20.06.2025 02:00** (–ú–°–ö/GMT+3)
–í —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–≥—É—Ç –Ω–∞–±–ª—é–¥–∞—Ç—å—Å—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –≤ –¥–æ—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–±–æ–Ω–µ–Ω—Ç–∞–º –¥–∞–Ω–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.''',
        'from': 'no-reply@devinotele.com',
        'date': '2025-06-19 18:30:00',
        'id': 12345
    }
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –ø–∏—Å—å–º–∞")
    print("=" * 60)
    
    parser = EmailParser()
    
    print("üìß –ò—Å—Ö–æ–¥–Ω–æ–µ –ø–∏—Å—å–º–æ:")
    print(f"–¢–µ–º–∞: {sample_email['subject']}")
    print(f"–¢–µ–∫—Å—Ç: {sample_email['body'][:100]}...")
    print("-" * 40)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø–∏—Å—å–º–∞
    print("\nüîç –¢–µ—Å—Ç 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–∏—Å—å–º–∞...")
    is_maintenance = parser.is_maintenance_email(sample_email)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–∞—Ö' if is_maintenance else '‚ùå –û–±—ã—á–Ω–æ–µ –ø–∏—Å—å–º–æ'}")
    
    if not is_maintenance:
        print("‚ùå –ü–∞—Ä—Å–µ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –ø–∏—Å—å–º–æ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–∞—Ö")
        return False
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –¢–µ—Å—Ç 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    parsed_data = parser.parse_email(sample_email)
    
    if not parsed_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∏—Å—å–º–∞")
        return False
    
    print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω—ã:")
    for key, value in parsed_data.items():
        if key not in ['original_body', 'description', 'parsed_at']:
            print(f"  üìù {key}: {value}")
    
    # –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram
    print("\nüì± –¢–µ—Å—Ç 3: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Telegram...")
    telegram_message = parser.format_for_telegram(parsed_data)
    
    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:")
    print("-" * 40)
    print(telegram_message)
    print("-" * 40)
    
    return True

def test_parser_with_real_emails():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö –∏–∑ –ø–æ—á—Ç—ã"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    load_dotenv()
    
    server = os.getenv('EMAIL_SERVER', 'imap.yandex.ru')
    port = int(os.getenv('EMAIL_PORT', 993))
    login = os.getenv('EMAIL_LOGIN')
    password = os.getenv('EMAIL_PASSWORD')
    sender = os.getenv('EMAIL_SENDER')
    
    if not all([login, password, sender]):
        print("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–æ—á—Ç–µ
    client = EmailClient(server, port, login, password)
    parser = EmailParser()
    
    try:
        if not client.connect():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–æ—á—Ç–µ")
            return False
        
        if not client.select_mailbox():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É INBOX")
            return False
        
        # –ò—â–µ–º –ø–∏—Å—å–º–∞ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        print(f"üîç –ü–æ–∏—Å–∫ –ø–∏—Å–µ–º –æ—Ç {sender}...")
        email_ids = client.search_emails_from_sender(sender, days_back=7)
        
        if not email_ids:
            print("‚ùå –ü–∏—Å—å–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(email_ids)} –ø–∏—Å–µ–º")
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–∏—Å—å–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
        test_ids = email_ids[-3:] if len(email_ids) >= 3 else email_ids
        
        for i, email_id in enumerate(test_ids, 1):
            print(f"\nüìß –¢–µ—Å—Ç –ø–∏—Å—å–º–∞ {i}/{len(test_ids)} (ID: {email_id})")
            print("-" * 40)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
            email_data = client.get_email_content(email_id)
            if not email_data:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Å—å–º–æ {email_id}")
                continue
            
            print(f"–¢–µ–º–∞: {email_data['subject'][:60]}...")
            print(f"–î–∞—Ç–∞: {email_data['date']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–∏—Å—å–º–∞
            is_maintenance = parser.is_maintenance_email(email_data)
            print(f"–¢–∏–ø: {'üöß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–∞—Ö' if is_maintenance else 'üìÑ –û–±—ã—á–Ω–æ–µ –ø–∏—Å—å–º–æ'}")
            
            if is_maintenance:
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                parsed_data = parser.parse_email(email_data)
                if parsed_data:
                    print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ:")
                    print(f"  –û–ø–µ—Ä–∞—Ç–æ—Ä: {parsed_data.get('operator', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                    print(f"  –ù–∞—á–∞–ª–æ: {parsed_data.get('start_time', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
                    print(f"  –û–∫–æ–Ω—á–∞–Ω–∏–µ: {parsed_data.get('end_time', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}")
                    print(f"  –¢–∏–ø —Ä–∞–±–æ—Ç: {parsed_data.get('work_type', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
                    telegram_msg = parser.format_for_telegram(parsed_data)
                    print(f"\nüì± Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ:")
                    print(telegram_msg[:200] + "..." if len(telegram_msg) > 200 else telegram_msg)
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ")
        
        client.disconnect()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        client.disconnect()
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å–µ–º")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ù–∞ –ø—Ä–∏–º–µ—Ä–µ –ø–∏—Å—å–º–∞
    success1 = test_parser_with_sample()
    
    # –¢–µ—Å—Ç 2: –ù–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö
    if success1:
        response = input("\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö –∏–∑ –ø–æ—á—Ç—ã? (y/n): ")
        if response.lower() == 'y':
            success2 = test_parser_with_real_emails()
        else:
            success2 = True
            print("‚ÑπÔ∏è –¢–µ—Å—Ç –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–∏—Å—å–º–∞—Ö –ø—Ä–æ–ø—É—â–µ–Ω")
    else:
        success2 = False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    if success1 and success2:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚û°Ô∏è –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üìù –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: —Å–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞")
    else:
        print("üí° –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–∞—Ä—Å–µ—Ä–æ–º, –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()